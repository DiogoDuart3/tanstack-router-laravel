/// <reference lib="webworker" />
import { cleanupOutdatedCaches, precacheAndRoute } from 'workbox-precaching';
import { CacheFirst } from 'workbox-strategies';
import { registerRoute } from 'workbox-routing';

declare let self: ServiceWorkerGlobalScope;

// Precache all the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Clean up outdated caches
cleanupOutdatedCaches();

// Cache Google Fonts
registerRoute(
  /^https:\/\/fonts\.googleapis\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-stylesheets',
  })
);

registerRoute(
  /^https:\/\/fonts\.gstatic\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
  })
);

// Handle push notification events
self.addEventListener('push', (event) => {
  console.log('SW: Push event received:', event);

  if (!event.data) {
    console.log('SW: Push event had no data');
    return;
  }

  try {
    const data = event.data.json();
    console.log('SW: Push notification data:', data);

    const options: NotificationOptions & { actions?: { action: string; title: string; icon?: string }[]; image?: string } = {
      body: data.body || data.message || 'You have a new notification',
      icon: data.icon || '/favicon.svg',
      badge: data.badge || '/favicon.svg',
      tag: data.tag || 'default',
      data: data.data || data,
      actions: data.actions || [],
      requireInteraction: data.requireInteraction || false,
      silent: data.silent || false,
    };

    if (data.image) {
      options.image = data.image;
    }

    const title = data.title || 'Laravel App Notification';

    event.waitUntil(
      self.registration.showNotification(title, options)
        .then(() => {
          console.log('SW: Notification displayed successfully');
        })
        .catch((error) => {
          console.error('SW: Error displaying notification:', error);
        })
    );
  } catch (error) {
    console.error('SW: Error parsing push data:', error);

    // Fallback notification
    event.waitUntil(
      self.registration.showNotification('Laravel App', {
        body: 'You have a new notification',
        icon: '/favicon.svg',
        tag: 'fallback'
      })
    );
  }
});

// Handle notification click events
self.addEventListener('notificationclick', (event) => {
  console.log('SW: Notification clicked:', event.notification);

  event.notification.close();

  const notificationData = event.notification.data;
  let urlToOpen = '/';

  if (notificationData && notificationData.url) {
    urlToOpen = notificationData.url;
  }

  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clientList) => {
        // Check if there's already a window/tab open with the target URL
        for (const client of clientList) {
          if (client.url === urlToOpen && 'focus' in client) {
            return client.focus();
          }
        }

        // If no window/tab is open with the target URL, open a new one
        if (self.clients.openWindow) {
          return self.clients.openWindow(urlToOpen);
        }
      })
      .catch((error) => {
        console.error('SW: Error handling notification click:', error);
      })
  );
});

// Handle notification close events
self.addEventListener('notificationclose', (event) => {
  console.log('SW: Notification closed:', event.notification);

  // Optional: Track notification dismissals
  const notificationData = event.notification.data;
  if (notificationData && notificationData.track_dismissal) {
    // You could send analytics here
    console.log('SW: Notification dismissed by user');
  }
});

// Handle messages from the main thread
self.addEventListener('message', (event) => {
  console.log('SW: Message received:', event.data);

  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

console.log('SW: Service worker loaded with push notification support');
