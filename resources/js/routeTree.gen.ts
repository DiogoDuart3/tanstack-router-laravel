/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GoTodosRouteImport } from './routes/go/todos'
import { Route as GoProfileRouteImport } from './routes/go/profile'
import { Route as GoInstallPwaRouteImport } from './routes/go/install-pwa'
import { Route as GoHealthRouteImport } from './routes/go/health'
import { Route as GoDashboardRouteImport } from './routes/go/dashboard'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GoTodosRoute = GoTodosRouteImport.update({
  id: '/go/todos',
  path: '/go/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const GoProfileRoute = GoProfileRouteImport.update({
  id: '/go/profile',
  path: '/go/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const GoInstallPwaRoute = GoInstallPwaRouteImport.update({
  id: '/go/install-pwa',
  path: '/go/install-pwa',
  getParentRoute: () => rootRouteImport,
} as any)
const GoHealthRoute = GoHealthRouteImport.update({
  id: '/go/health',
  path: '/go/health',
  getParentRoute: () => rootRouteImport,
} as any)
const GoDashboardRoute = GoDashboardRouteImport.update({
  id: '/go/dashboard',
  path: '/go/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/go/dashboard': typeof GoDashboardRoute
  '/go/health': typeof GoHealthRoute
  '/go/install-pwa': typeof GoInstallPwaRoute
  '/go/profile': typeof GoProfileRoute
  '/go/todos': typeof GoTodosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/go/dashboard': typeof GoDashboardRoute
  '/go/health': typeof GoHealthRoute
  '/go/install-pwa': typeof GoInstallPwaRoute
  '/go/profile': typeof GoProfileRoute
  '/go/todos': typeof GoTodosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/go/dashboard': typeof GoDashboardRoute
  '/go/health': typeof GoHealthRoute
  '/go/install-pwa': typeof GoInstallPwaRoute
  '/go/profile': typeof GoProfileRoute
  '/go/todos': typeof GoTodosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/go/dashboard'
    | '/go/health'
    | '/go/install-pwa'
    | '/go/profile'
    | '/go/todos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/go/dashboard'
    | '/go/health'
    | '/go/install-pwa'
    | '/go/profile'
    | '/go/todos'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/go/dashboard'
    | '/go/health'
    | '/go/install-pwa'
    | '/go/profile'
    | '/go/todos'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  GoDashboardRoute: typeof GoDashboardRoute
  GoHealthRoute: typeof GoHealthRoute
  GoInstallPwaRoute: typeof GoInstallPwaRoute
  GoProfileRoute: typeof GoProfileRoute
  GoTodosRoute: typeof GoTodosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/go/todos': {
      id: '/go/todos'
      path: '/go/todos'
      fullPath: '/go/todos'
      preLoaderRoute: typeof GoTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/go/profile': {
      id: '/go/profile'
      path: '/go/profile'
      fullPath: '/go/profile'
      preLoaderRoute: typeof GoProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/go/install-pwa': {
      id: '/go/install-pwa'
      path: '/go/install-pwa'
      fullPath: '/go/install-pwa'
      preLoaderRoute: typeof GoInstallPwaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/go/health': {
      id: '/go/health'
      path: '/go/health'
      fullPath: '/go/health'
      preLoaderRoute: typeof GoHealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/go/dashboard': {
      id: '/go/dashboard'
      path: '/go/dashboard'
      fullPath: '/go/dashboard'
      preLoaderRoute: typeof GoDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  GoDashboardRoute: GoDashboardRoute,
  GoHealthRoute: GoHealthRoute,
  GoInstallPwaRoute: GoInstallPwaRoute,
  GoProfileRoute: GoProfileRoute,
  GoTodosRoute: GoTodosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
